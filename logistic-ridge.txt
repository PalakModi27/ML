lambda_val = 0.2
A = x_train.T.dot(x_train)
I = np.identity(A.shape[0])
B = A + lambda_val * I
C = np.linalg.inv(B)
D = C.dot(x_train.T)
beta = D.dot(y_train)

n = 1000
alpha = 10
m,k = x_train.shape
# beta = np.zeros(k)
for i in range(n):
    cost_gradient = np.zeros(k)
    z = x_train.dot(beta)
    predicted = 1/(1+np.exp(-z))
    difference = predicted - y_train
    for j in range(k):
        cost_gradient[j] = np.sum(difference.dot(x_train[:,j]))
    for j in range(k):
        beta[j] = beta[j] - (alpha/m)*cost_gradient[j]
print(beta)

y_pred = 1/(1+np.exp(-(x_test.dot(beta))))
y_label = np.zeros(len(y_pred))
for i in range(len(y_pred)):
    if(y_pred[i]>=0.5):
        y_label[i]=1

rest all same